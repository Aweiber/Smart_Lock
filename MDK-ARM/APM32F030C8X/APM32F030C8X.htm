<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [APM32F030C8X\APM32F030C8X.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image APM32F030C8X\APM32F030C8X.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Apr 17 22:23:12 2023
<BR><P>
<H3>Maximum Stack Usage =        496 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Lpcd_Card_Event &rArr; Add_TyteA_Card &rArr; Read_TyteA_Card &rArr; TypeA_CardActive &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from stm32f0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2b]">FLASH_ReadPlay</a> from flash.o(i.FLASH_ReadPlay) referenced from main.o(i.Application_Layer)
 <LI><a href="#[2c]">FLASH_WritePlay</a> from flash.o(i.FLASH_WritePlay) referenced from main.o(i.Application_Layer)
 <LI><a href="#[33]">Finger_Inter_Init</a> from finger.o(i.Finger_Inter_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[32]">Finger_Power_Init</a> from finger.o(i.Finger_Power_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[25]">Finger_Power_OnOff</a> from finger.o(i.Finger_Power_OnOff) referenced from main.o(i.Application_Layer)
 <LI><a href="#[26]">Finger_Show_Play</a> from finger.o(i.Finger_Show_Play) referenced from main.o(i.Application_Layer)
 <LI><a href="#[2f]">Finger_Uart2_Init</a> from finger.o(i.Finger_Uart2_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[39]">Flash_Init</a> from flash.o(i.Flash_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[29]">Get_Power_Value</a> from power.o(i.Get_Power_Value) referenced from main.o(i.Application_Layer)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[31]">LED_Init</a> from led.o(i.LED_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[24]">LED_OnOff</a> from led.o(i.LED_OnOff) referenced from main.o(i.Application_Layer)
 <LI><a href="#[36]">MX_ADC_Init</a> from power.o(i.MX_ADC_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[3a]">MX_RTC_Init</a> from rtc.o(i.MX_RTC_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[3b]">MX_TIM3_Init</a> from tim.o(i.MX_TIM3_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[37]">Motor_Init</a> from motor.o(i.Motor_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[2a]">Motor_OpenClose</a> from motor.o(i.Motor_OpenClose) referenced from main.o(i.Application_Layer)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[35]">OLED_Init</a> from oled.o(i.OLED_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[28]">OLED_Show_Play</a> from oled.o(i.OLED_Show_Play) referenced from main.o(i.Application_Layer)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2d]">RTC_GET_Time</a> from rtc.o(i.RTC_GET_Time) referenced from main.o(i.Application_Layer)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[38]">Touch_Init</a> from touch.o(i.Touch_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[2e]">UART_DMAAbortOnError</a> from stm32f0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3c]">WIFI_Init</a> from wifiinit.o(i.WIFI_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[34]">WTN6_Gpio_Init</a> from voice.o(i.WTN6_Gpio_Init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[27]">WTN6_Play</a> from voice.o(i.WTN6_Play) referenced from main.o(i.Application_Layer)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[3e]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[30]">delay_init</a> from delay.o(i.delay_init) referenced from main.o(i.Initialization_Layer)
 <LI><a href="#[23]">delay_ms</a> from delay.o(i.delay_ms) referenced from main.o(i.Application_Layer)
 <LI><a href="#[22]">delay_us</a> from delay.o(i.delay_us) referenced from main.o(i.Application_Layer)
 <LI><a href="#[3d]">fputc</a> from main.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[189]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[41]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[18c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[18d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Value
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrytime_func
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verity_TemPwd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encry_TemPwd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[190]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_WUP
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_PWD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_NFC
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_Layer_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUYA_WiFi_Zone_Page
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_Layer_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Fill
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Center_Fill
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Center
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16_Center
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16
</UL>

<P><STRONG><a name="[179]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[196]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[197]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>Add_TyteA_Card</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, type_a.o(i.Add_TyteA_Card))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Add_TyteA_Card &rArr; Read_TyteA_Card &rArr; TypeA_CardActive &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Card_Event
</UL>

<P><STRONG><a name="[52]"></a>Add_TyteB_Card</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, type_b.o(i.Add_TyteB_Card))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Add_TyteB_Card &rArr; Read_TyteB_Card &rArr; TypeB_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Card_Event
</UL>

<P><STRONG><a name="[174]"></a>Application_Layer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.Application_Layer))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>BeiJTime_To_GelinUTC</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, rtc.o(i.BeiJTime_To_GelinUTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BeiJTime_To_GelinUTC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_data
</UL>

<P><STRONG><a name="[56]"></a>CD_CfgTPD</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, fm175xx.o(i.CD_CfgTPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CD_CfgTPD &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[58]"></a>CD_ClrTPD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fm175xx.o(i.CD_ClrTPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_ClrTPD
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_RST
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
</UL>

<P><STRONG><a name="[5a]"></a>CD_SetTPD</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fm175xx.o(i.CD_SetTPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_SetTPD
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_RST
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
</UL>

<P><STRONG><a name="[5b]"></a>Clear_BitMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fm175xx.o(i.Clear_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Clear_BitMask &rArr; Write_Reg &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[5e]"></a>Clear_FIFO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm175xx.o(i.Clear_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Clear_FIFO &rArr; Set_BitMask &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[61]"></a>CollSaveUID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, type_a.o(i.CollSaveUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CollSaveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightMoveBit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[178]"></a>Compare_NFC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.Compare_NFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Compare_NFC
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Compare_PWD</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, main.o(i.Compare_PWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Compare_PWD &rArr; Encryption_PWD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_PWD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>Compare_TemPwd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.Compare_TemPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Compare_TemPwd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>DATA_Layer_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(i.DATA_Layer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DATA_Layer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Touch_ReadByte &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Touch_ReadByte &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Encry_TemPwd</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, main.o(i.Encry_TemPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Encry_TemPwd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Encryption_NFC</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.Encryption_NFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Encryption_NFC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Encryption_PWD</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.Encryption_PWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Encryption_PWD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_PWD
</UL>

<P><STRONG><a name="[88]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Uart2_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2b]"></a>FLASH_ReadPlay</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, flash.o(i.FLASH_ReadPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ReadPlay &rArr; Flash_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[6e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2c]"></a>FLASH_WritePlay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash.o(i.FLASH_WritePlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLASH_WritePlay &rArr; Flash_WriteData &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[71]"></a>FM175XX_HPD</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, fm175xx.o(i.FM175XX_HPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM175XX_HPD &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_SetTPD
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ClrTPD
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
</UL>

<P><STRONG><a name="[72]"></a>FM175XX_HardReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_spinfc.o(i.FM175XX_HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FM175XX_HardReset &rArr; FM175XX_HPD &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
</UL>

<P><STRONG><a name="[73]"></a>FM175X_SoftReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fm175xx.o(i.FM175X_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FM175X_SoftReset &rArr; Set_BitMask &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>

<P><STRONG><a name="[74]"></a>Find_SameNFC</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.Find_SameNFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Find_SameNFC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Find_SamePWD</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.Find_SamePWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Find_SamePWD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Finger_Break_Cmd</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, finger.o(i.Finger_Break_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Finger_Break_Cmd &rArr; Finger_Send_CMD &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[78]"></a>Finger_Delete</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, finger.o(i.Finger_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Finger_Delete &rArr; fingerService &rArr; Finger_Recevie_Service &rArr; finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[7a]"></a>Finger_Factory</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, finger.o(i.Finger_Factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Finger_Factory &rArr; fingerService &rArr; Finger_Recevie_Service &rArr; finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[ee]"></a>Finger_Input_Data</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, finger.o(i.Finger_Input_Data))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[33]"></a>Finger_Inter_Init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, finger.o(i.Finger_Inter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Finger_Inter_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[173]"></a>Finger_OutPut_Data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, finger.o(i.Finger_OutPut_Data))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
</UL>

<P><STRONG><a name="[32]"></a>Finger_Power_Init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, finger.o(i.Finger_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Finger_Power_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[25]"></a>Finger_Power_OnOff</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, finger.o(i.Finger_Power_OnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Finger_Power_OnOff &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[7d]"></a>Finger_Recevie_Service</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, finger.o(i.Finger_Recevie_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Finger_Recevie_Service &rArr; finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_vertiy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_factory
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_delete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_add
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
</UL>

<P><STRONG><a name="[82]"></a>Finger_Send_1vN</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, finger.o(i.Finger_Send_1vN))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Finger_Send_1vN &rArr; Finger_Send_CMD &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[83]"></a>Finger_Send_Add_Figner</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, finger.o(i.Finger_Send_Add_Figner))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Finger_Send_Add_Figner &rArr; fingerService &rArr; Finger_Recevie_Service &rArr; finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[77]"></a>Finger_Send_CMD</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, finger.o(i.Finger_Send_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Finger_Send_CMD &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_get_info
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Connect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Add_Figner
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_1vN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Factory
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Delete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Break_Cmd
</UL>

<P><STRONG><a name="[85]"></a>Finger_Send_Connect</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finger.o(i.Finger_Send_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Finger_Send_Connect &rArr; Finger_Send_CMD &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[26]"></a>Finger_Show_Play</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, finger.o(i.Finger_Show_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Finger_Show_Play &rArr; Finger_Send_Add_Figner &rArr; fingerService &rArr; Finger_Recevie_Service &rArr; finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_get_info
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Connect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Add_Figner
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_1vN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Factory
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Delete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Break_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[2f]"></a>Finger_Uart2_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, finger.o(i.Finger_Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Finger_Uart2_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization_Layer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[39]"></a>Flash_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[6d]"></a>Flash_ReadData</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, flash.o(i.Flash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadPlay
</UL>

<P><STRONG><a name="[70]"></a>Flash_WriteData</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, flash.o(i.Flash_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Flash_WriteData &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WritePlay
</UL>

<P><STRONG><a name="[8f]"></a>GetReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fm175xx.o(i.GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetReg &rArr; spi_GetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Driver
</UL>

<P><STRONG><a name="[90]"></a>GetReg_Ext</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lpcd_regctrl.o(i.GetReg_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg2
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_IRQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg_Ext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_WaitFor_Irq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Value
</UL>

<P><STRONG><a name="[29]"></a>Get_Power_Value</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, power.o(i.Get_Power_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Get_Power_Value &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[97]"></a>Get_Wifi_Risi</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, protocol.o(i.Get_Wifi_Risi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Wifi_Risi &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[98]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_DeInit &rArr; HAL_ADC_MspDeInit &rArr; HAL_DMA_DeInit &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_DeInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>HAL_ADC_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Value
</UL>

<P><STRONG><a name="[96]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Value
</UL>

<P><STRONG><a name="[9b]"></a>HAL_ADC_Init</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_ADC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ADC_MspDeInit &rArr; HAL_DMA_DeInit &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Value
</UL>

<P><STRONG><a name="[93]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Value
</UL>

<P><STRONG><a name="[9f]"></a>HAL_ADC_Stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_DeInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_DeInit &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[8e]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[8d]"></a>HAL_FLASH_Program</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[8b]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[6a]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32f0xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; Touch_ReadByte &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadByte
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>HAL_GPIO_Init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_CfgTPD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Gpio_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Pick_Proof
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_Gpio
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INDoor_Reset_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Power_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Inter_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Power_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_interrupt_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Inter_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Gpio_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_DeInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OpenClose
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OnOff
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Power_OnOff
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite_Sequence
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead_Sequence
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_SetTPD
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ClrTPD
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Inter_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte_Fill
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_vertiy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg2
</UL>

<P><STRONG><a name="[4d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[112]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadByte
</UL>

<P><STRONG><a name="[af]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadByte
</UL>

<P><STRONG><a name="[b1]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_WriteData
</UL>

<P><STRONG><a name="[a7]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[a9]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_MspInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Mode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[7c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Pick_Proof
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Mode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INDoor_Reset_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Inter_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_interrupt_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Inter_Init
</UL>

<P><STRONG><a name="[7b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Pick_Proof
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INDoor_Reset_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Inter_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_interrupt_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Inter_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17e]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[154]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_GetYmd
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_GetHms
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RTC_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_MspInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Set_Ymd
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Set_Hms
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_SPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; CD_CfgTPD &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WakeUp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, stm32f0xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; CD_CfgTPD &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_CfgTPD
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NFC_SendByte
</UL>

<P><STRONG><a name="[16a]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f0xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[17d]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>HAL_UART_DeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Uart2_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f0xx_it.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_ErrorCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[e2]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Uart2_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, stm32f0xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Uart2_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_input
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Input_Data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[84]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>

<P><STRONG><a name="[153]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>INDoor_Reset_Init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, sys.o(i.INDoor_Reset_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = INDoor_Reset_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>Initialization_Layer</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.Initialization_Layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Initialization_Layer &rArr; Finger_Uart2_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Uart2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>LED_Init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[24]"></a>LED_OnOff</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(i.LED_OnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_OnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[63]"></a>LeftMoveBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, type_a.o(i.LeftMoveBit))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollSaveUID
</UL>

<P><STRONG><a name="[f5]"></a>Low_Power_Gpio</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, sys.o(i.Low_Power_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Low_Power_Gpio &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>Lpcd_Calibrate_Driver</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lpcd_api.o(i.Lpcd_Calibrate_Driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Lpcd_Calibrate_Driver &rArr; Lpcd_Get_Calibration_Value &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Threshold
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Gain
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Driver
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
</UL>

<P><STRONG><a name="[fb]"></a>Lpcd_Calibrate_Reference</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lpcd_api.o(i.Lpcd_Calibrate_Reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Lpcd_Calibrate_Reference &rArr; Lpcd_Get_Calibration_Value &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Reference
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Gain
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Driver
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Reset_Status
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
</UL>

<P><STRONG><a name="[118]"></a>Lpcd_Calibration_Backup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpcd_api.o(i.Lpcd_Calibration_Backup))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
</UL>

<P><STRONG><a name="[fe]"></a>Lpcd_Calibration_Event</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Calibration_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Lpcd_Calibration_Event &rArr; Lpcd_Calibrate_Reference &rArr; Lpcd_Get_Calibration_Value &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Timer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Aux
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Reset_Status
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Init_Register
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Restore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Reference
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Driver
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_IRQ_Event
</UL>

<P><STRONG><a name="[102]"></a>Lpcd_Calibration_Restore</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpcd_api.o(i.Lpcd_Calibration_Restore))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
</UL>

<P><STRONG><a name="[103]"></a>Lpcd_Card_Event</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Card_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Lpcd_Card_Event &rArr; Add_TyteA_Card &rArr; Read_TyteA_Card &rArr; TypeA_CardActive &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_TyteB_Card
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_TyteA_Card
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>Lpcd_Get_Calibration_Value</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpcd_api.o(i.Lpcd_Get_Calibration_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Lpcd_Get_Calibration_Value &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg_Ext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_WaitFor_Irq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Reset_Status
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Reference
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Driver
</UL>

<P><STRONG><a name="[108]"></a>Lpcd_Get_IRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Get_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Lpcd_Get_IRQ &rArr; Lpcd_Get_Value &rArr; GetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg_Ext
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Reset_Status
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>Lpcd_Get_Value</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lpcd_api.o(i.Lpcd_Get_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Lpcd_Get_Value &rArr; GetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_IRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
</UL>

<P><STRONG><a name="[109]"></a>Lpcd_IRQ_Event</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_IRQ_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Lpcd_IRQ_Event &rArr; Lpcd_Calibration_Event &rArr; Lpcd_Calibrate_Reference &rArr; Lpcd_Get_Calibration_Value &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Reference
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_IRQ_pin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Gain
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Driver
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>Lpcd_Init_Register</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Init_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lpcd_Init_Register &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_IRQ_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
</UL>

<P><STRONG><a name="[fc]"></a>Lpcd_Reset_Status</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Reset_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lpcd_Reset_Status &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_IRQ
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Reference
</UL>

<P><STRONG><a name="[101]"></a>Lpcd_Set_Aux</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_Aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Lpcd_Set_Aux &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
</UL>

<P><STRONG><a name="[f8]"></a>Lpcd_Set_Driver</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lpcd_api.o(i.Lpcd_Set_Driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Lpcd_Set_Driver &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_IRQ_Event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Reference
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Driver
</UL>

<P><STRONG><a name="[f7]"></a>Lpcd_Set_Gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lpcd_Set_Gain &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_IRQ_Event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Reference
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Driver
</UL>

<P><STRONG><a name="[10c]"></a>Lpcd_Set_IE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lpcd_Set_IE &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Mode
</UL>

<P><STRONG><a name="[10a]"></a>Lpcd_Set_IRQ_pin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_IRQ_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Lpcd_Set_IRQ_pin &rArr; SetReg &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_IRQ_Event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Init_Register
</UL>

<P><STRONG><a name="[10d]"></a>Lpcd_Set_Mode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Lpcd_Set_Mode &rArr; Lpcd_Set_IE &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>Lpcd_Set_Reference</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_Reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lpcd_Set_Reference &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_IRQ_Event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Reference
</UL>

<P><STRONG><a name="[fa]"></a>Lpcd_Set_Threshold</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lpcd_api.o(i.Lpcd_Set_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Lpcd_Set_Threshold &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Driver
</UL>

<P><STRONG><a name="[100]"></a>Lpcd_Set_Timer</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lpcd_api.o(i.Lpcd_Set_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lpcd_Set_Timer &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
</UL>

<P><STRONG><a name="[105]"></a>Lpcd_WaitFor_Irq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lpcd_api.o(i.Lpcd_WaitFor_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Lpcd_WaitFor_Irq &rArr; GetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
</UL>

<P><STRONG><a name="[10e]"></a>MCU_TO_PCD_TEST</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fm175xx.o(i.MCU_TO_PCD_TEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MCU_TO_PCD_TEST &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_RST
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WakeUp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
</UL>

<P><STRONG><a name="[110]"></a>MX_ADC_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, power.o(i.MX_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_ADC_DeInit &rArr; HAL_ADC_DeInit &rArr; HAL_ADC_MspDeInit &rArr; HAL_DMA_DeInit &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>MX_ADC_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, power.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[111]"></a>MX_I2C1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, touch.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[114]"></a>MX_RTC_GetHms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.MX_RTC_GetHms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MX_RTC_GetHms &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GET_Time
</UL>

<P><STRONG><a name="[115]"></a>MX_RTC_GetYmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc.o(i.MX_RTC_GetYmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MX_RTC_GetYmd &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GET_Time
</UL>

<P><STRONG><a name="[3a]"></a>MX_RTC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[116]"></a>MX_SPINfc_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_spinfc.o(i.MX_SPINfc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MX_SPINfc_Init &rArr; Lpcd_Calibration_Event &rArr; Lpcd_Calibrate_Reference &rArr; Lpcd_Get_Calibration_Value &rArr; ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_TO_PCD_TEST
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibration_Backup
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_interrupt_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>MX_Set_Hms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc.o(i.MX_Set_Hms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_Set_Hms &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
</UL>

<P><STRONG><a name="[11a]"></a>MX_Set_Ymd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.MX_Set_Ymd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_Set_Ymd &rArr; HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
</UL>

<P><STRONG><a name="[3b]"></a>MX_TIM3_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[106]"></a>ModifyReg_Ext</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lpcd_regctrl.o(i.ModifyReg_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ModifyReg_Ext &rArr; SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Aux
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
</UL>

<P><STRONG><a name="[37]"></a>Motor_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[2a]"></a>Motor_OpenClose</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, motor.o(i.Motor_OpenClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Motor_OpenClose &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NMI_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>OLED_Clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>OLED_DrawBMP</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, oled.o(i.OLED_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_DrawBMP &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[35]"></a>OLED_Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Init &rArr; OLED_Power_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[120]"></a>OLED_Power_Init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, oled.o(i.OLED_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Power_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[11f]"></a>OLED_SetPos</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.OLED_SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_24Char_Fill
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_24Char
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char_Fill
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese24_Fill
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese24
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[121]"></a>OLED_ShowCHinese16</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowCHinese16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_ShowCHinese16 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Wifi_Risi
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16
</UL>

<P><STRONG><a name="[122]"></a>OLED_ShowCHinese24</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowCHinese24))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_ShowCHinese24 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24
</UL>

<P><STRONG><a name="[123]"></a>OLED_ShowCHinese24_Fill</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowCHinese24_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_ShowCHinese24_Fill &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte_Fill
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Fill
</UL>

<P><STRONG><a name="[125]"></a>OLED_Show_16Char</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_16Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Show_16Char &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>OLED_Show_16Char_Fill</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_16Char_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Show_16Char_Fill &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte_Fill
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[127]"></a>OLED_Show_24Char</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_24Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Show_24Char &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[128]"></a>OLED_Show_24Char_Fill</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_24Char_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Show_24Char_Fill &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte_Fill
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[129]"></a>OLED_Show_Chinese_16</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_Chinese_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Show_Chinese_16 &rArr; OLED_ShowCHinese16 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Baterry
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16_Center
</UL>

<P><STRONG><a name="[12b]"></a>OLED_Show_Chinese_16_Center</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oled.o(i.OLED_Show_Chinese_16_Center))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Show_Chinese_16_Center &rArr; OLED_Show_Chinese_16 &rArr; OLED_ShowCHinese16 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[12c]"></a>OLED_Show_Chinese_24</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_Chinese_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Show_Chinese_24 &rArr; OLED_ShowCHinese24 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese24
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Center
</UL>

<P><STRONG><a name="[12d]"></a>OLED_Show_Chinese_24_Center</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, oled.o(i.OLED_Show_Chinese_24_Center))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Show_Chinese_24_Center &rArr; OLED_Show_Chinese_24 &rArr; OLED_ShowCHinese24 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[12e]"></a>OLED_Show_Chinese_24_Center_Fill</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, oled.o(i.OLED_Show_Chinese_24_Center_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Show_Chinese_24_Center_Fill &rArr; OLED_Show_Chinese_24_Fill &rArr; OLED_ShowCHinese24_Fill &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Fill
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[12f]"></a>OLED_Show_Chinese_24_Fill</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_Chinese_24_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Show_Chinese_24_Fill &rArr; OLED_ShowCHinese24_Fill &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese24_Fill
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Center_Fill
</UL>

<P><STRONG><a name="[28]"></a>OLED_Show_Play</STRONG> (Thumb, 8492 bytes, Stack size 24 bytes, oled.o(i.OLED_Show_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OLED_Show_Play &rArr; OLED_Show_Chinese_24_Center_Fill &rArr; OLED_Show_Chinese_24_Fill &rArr; OLED_ShowCHinese24_Fill &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Wifi_Risi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Baterry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Fill
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Center_Fill
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24_Center
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_24
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16_Center
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_24Char_Fill
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_24Char
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char_Fill
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[11d]"></a>OLED_WR_Byte</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_24Char
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese24
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese16
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[124]"></a>OLED_WR_Byte_Fill</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, oled.o(i.OLED_WR_Byte_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WR_Byte_Fill
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_24Char_Fill
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char_Fill
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese24_Fill
</UL>

<P><STRONG><a name="[132]"></a>Pcd_Comm</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, fm175xx.o(i.Pcd_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_WUP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_Select
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_GetUID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[135]"></a>Pcd_ConfigISOType</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, fm175xx.o(i.Pcd_ConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Pcd_ConfigISOType &rArr; Set_BitMask &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>

<P><STRONG><a name="[136]"></a>Pcd_SetTimer</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fm175xx.o(i.Pcd_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Pcd_SetTimer &rArr; Set_BitMask &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_WUP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_Select
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_GetUID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>Queue_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.Queue_Read_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[be]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[c5]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[c2]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2d]"></a>RTC_GET_Time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(i.RTC_GET_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_GET_Time &rArr; MX_RTC_GetYmd &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_GetYmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_GetHms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[134]"></a>Read_FIFO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fm175xx.o(i.Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Read_FIFO &rArr; SPIRead_Sequence &rArr; spi_GetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[5c]"></a>Read_Reg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm175xx.o(i.Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_Reg &rArr; spi_GetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>

<P><STRONG><a name="[51]"></a>Read_TyteA_Card</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, type_a.o(i.Read_TyteA_Card))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Read_TyteA_Card &rArr; TypeA_CardActive &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175X_SoftReset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActive
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_TyteA_Card
</UL>

<P><STRONG><a name="[53]"></a>Read_TyteB_Card</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, type_b.o(i.Read_TyteB_Card))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Read_TyteB_Card &rArr; TypeB_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175X_SoftReset
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_WUP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_Select
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeB_GetUID
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_TyteB_Card
</UL>

<P><STRONG><a name="[62]"></a>RightMoveBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, type_a.o(i.RightMoveBit))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollSaveUID
</UL>

<P><STRONG><a name="[137]"></a>SPIRead_Sequence</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nfcspi.o(i.SPIRead_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPIRead_Sequence &rArr; spi_GetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[13e]"></a>SPIWrite_Sequence</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nfcspi.o(i.SPIWrite_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
</UL>

<P><STRONG><a name="[141]"></a>SPI_NFC_SendByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_spinfc.o(i.SPI_NFC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>

<P><STRONG><a name="[142]"></a>SPI_SendByte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nfcspi.o(i.SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NFC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_GetReg2
</UL>

<P><STRONG><a name="[143]"></a>SPI_WakeUp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_spinfc.o(i.SPI_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPI_WakeUp &rArr; MCU_TO_PCD_TEST &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_TO_PCD_TEST
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVC_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>Send_Get_Wifi_Risi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol.o(i.Send_Get_Wifi_Risi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Send_Get_Wifi_Risi &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[10b]"></a>SetReg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fm175xx.o(i.SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetReg &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_IRQ_pin
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Driver
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Aux
</UL>

<P><STRONG><a name="[104]"></a>SetReg_Ext</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpcd_regctrl.o(i.SetReg_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetReg_Ext &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg_Ext
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Timer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Threshold
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Reference
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_IE
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Gain
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Driver
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Aux
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Reset_Status
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Init_Register
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_Calibration_Value
</UL>

<P><STRONG><a name="[5f]"></a>Set_BitMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fm175xx.o(i.Set_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Set_BitMask &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175X_SoftReset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
</UL>

<P><STRONG><a name="[138]"></a>Set_Rf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fm175xx.o(i.Set_Rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Set_Rf &rArr; Clear_BitMask &rArr; Write_Reg &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>

<P><STRONG><a name="[130]"></a>Show_Baterry</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, oled.o(i.Show_Baterry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Show_Baterry &rArr; OLED_Show_Chinese_16 &rArr; OLED_ShowCHinese16 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Chinese_16
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[131]"></a>Show_Wifi_Risi</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, oled.o(i.Show_Wifi_Risi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Show_Wifi_Risi &rArr; OLED_ShowCHinese16 &rArr; OLED_SetPos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese16
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>Sys_Pick_Proof</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sys.o(i.Sys_Pick_Proof))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sys_Pick_Proof &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d3]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[14a]"></a>TUYA_WiFi_Zone_Page</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, flash.o(i.TUYA_WiFi_Zone_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TUYA_WiFi_Zone_Page &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[14b]"></a>Touch_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, touch.o(i.Touch_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Touch_DeInit &rArr; Touch_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>Touch_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, touch.o(i.Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Touch_Init &rArr; Touch_Inter_Init &rArr; Touch_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Inter_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[14d]"></a>Touch_Inter_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, touch.o(i.Touch_Inter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Touch_Inter_Init &rArr; Touch_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[a4]"></a>Touch_ReadByte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, touch.o(i.Touch_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Touch_ReadByte &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[a5]"></a>Touch_ReadKey</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, touch.o(i.Touch_ReadKey))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[14c]"></a>Touch_WriteData</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, touch.o(i.Touch_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Touch_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Inter_Init
</UL>

<P><STRONG><a name="[14e]"></a>TypeA_Anticollision</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, type_a.o(i.TypeA_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Set_BitFraming
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollSaveUID
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActive
</UL>

<P><STRONG><a name="[139]"></a>TypeA_CardActive</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, type_a.o(i.TypeA_CardActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TypeA_CardActive &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>

<P><STRONG><a name="[150]"></a>TypeA_Request</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, type_a.o(i.TypeA_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TypeA_Request &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActive
</UL>

<P><STRONG><a name="[151]"></a>TypeA_Select</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, type_a.o(i.TypeA_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TypeA_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActive
</UL>

<P><STRONG><a name="[14f]"></a>TypeA_Set_BitFraming</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, type_a.o(i.TypeA_Set_BitFraming))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TypeA_Set_BitFraming &rArr; Write_Reg &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[13d]"></a>TypeB_GetUID</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, type_b.o(i.TypeB_GetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TypeB_GetUID &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
</UL>

<P><STRONG><a name="[13c]"></a>TypeB_Select</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, type_b.o(i.TypeB_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TypeB_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
</UL>

<P><STRONG><a name="[13b]"></a>TypeB_WUP</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, type_b.o(i.TypeB_WUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TypeB_WUP &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
</UL>

<P><STRONG><a name="[ea]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[eb]"></a>UART_CheckIdleState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e7]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>UART_Receive_IT</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>UART_SetConfig</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e6]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32f0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>Verity_TemPwd</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, main.o(i.Verity_TemPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Verity_TemPwd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>WIFI_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, wifiinit.o(i.WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WIFI_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_protocol_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Power_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[157]"></a>WIFI_Power_Init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wifiinit.o(i.WIFI_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WIFI_Power_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
</UL>

<P><STRONG><a name="[34]"></a>WTN6_Gpio_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, voice.o(i.WTN6_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WTN6_Gpio_Init &rArr; WTN6_Send_Data &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[27]"></a>WTN6_Play</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, voice.o(i.WTN6_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WTN6_Play &rArr; WTN6_Send_Data &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[a3]"></a>WTN6_Send_Data</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, voice.o(i.WTN6_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WTN6_Send_Data &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Play
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Gpio_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>Write_FIFO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fm175xx.o(i.Write_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[5d]"></a>Write_Reg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fm175xx.o(i.Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Write_Reg &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175X_SoftReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Set_BitFraming
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[158]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19a]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[55]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUYA_WiFi_Zone_Page
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Play
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Card_Event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Value
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Power_OnOff
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeiJTime_To_GelinUTC
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrytime_func
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verity_TemPwd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_SamePWD
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_SameNFC
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_PWD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_NFC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encry_TemPwd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_PWD
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Baterry
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_vertiy
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_delete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_add
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Connect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Recevie_Service
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Risi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_check_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_handle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Calibrate_Driver
</UL>

<P><STRONG><a name="[15a]"></a>__0sprintf$5</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19b]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[181]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[152]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Set_BitFraming
</UL>

<P><STRONG><a name="[19c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[15b]"></a>data_handle</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, system.o(i.data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = data_handle &rArr; mul_temp_pass_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUYA_WiFi_Zone_Page
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_update_handle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_result
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_gltime
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_update_handle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_firm_update_handle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_cmd_total
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Get_Wifi_Risi
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Risi
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pass_handle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_temp_pass_handle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_check_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_handle
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[30]"></a>delay_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Initialization_Layer)
</UL>
<P><STRONG><a name="[23]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_DeInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OpenClose
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HPD
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_GetYmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_GetHms
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Power_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_vertiy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Add_Figner
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Factory
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Delete
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_check_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_handle
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteB_Card
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TyteA_Card
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[22]"></a>delay_us</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_RST
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_WaitFor_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Application_Layer)
</UL>
<P><STRONG><a name="[15f]"></a>dp_download_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.dp_download_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dp_download_handle &rArr; dp_download_reply_unlock_request_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[16f]"></a>dynamic_pass_check</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lock_api.o(i.dynamic_pass_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dynamic_pass_check &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>encrytime_func</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, main.o(i.encrytime_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = encrytime_func &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>fingerService</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, finger.o(i.fingerService))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fingerService &rArr; Finger_Recevie_Service &rArr; finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Recevie_Service
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_OutPut_Data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_Add_Figner
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Factory
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Delete
</UL>

<P><STRONG><a name="[80]"></a>finger_for_add</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, finger.o(i.finger_for_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finger_for_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Recevie_Service
</UL>

<P><STRONG><a name="[7f]"></a>finger_for_delete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, finger.o(i.finger_for_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finger_for_delete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Recevie_Service
</UL>

<P><STRONG><a name="[7e]"></a>finger_for_factory</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, finger.o(i.finger_for_factory))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Recevie_Service
</UL>

<P><STRONG><a name="[81]"></a>finger_for_vertiy</STRONG> (Thumb, 670 bytes, Stack size 24 bytes, finger.o(i.finger_for_vertiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = finger_for_vertiy &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Recevie_Service
</UL>

<P><STRONG><a name="[86]"></a>finger_get_info</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, finger.o(i.finger_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = finger_get_info &rArr; Finger_Send_CMD &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Show_Play
</UL>

<P><STRONG><a name="[3d]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[187]"></a>get_check_sum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system.o(i.get_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[15e]"></a>get_download_cmd_total</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.get_download_cmd_total))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[186]"></a>get_queue_total_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.get_queue_total_data))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 9968 bytes, Stack size 112 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = main &rArr; Lpcd_Card_Event &rArr; Add_TyteA_Card &rArr; Read_TyteA_Card &rArr; TypeA_CardActive &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; SPIWrite_Sequence &rArr; spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset_wifi
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_system_time
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_mul_temp_pass
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fingerService
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_pass_check
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTN6_Send_Data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUYA_WiFi_Zone_Page
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Pick_Proof
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WakeUp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_16Char
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Set_Ymd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Set_Hms
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_DeInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Set_Mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_IRQ_Event
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Get_IRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpcd_Card_Event
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Power_Gpio
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INDoor_Reset_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeiJTime_To_GelinUTC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrytime_func
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verity_TemPwd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialization_Layer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_SamePWD
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_SameNFC
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_PWD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_NFC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encry_TemPwd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_Layer_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_TemPwd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_PWD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_NFC
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application_Layer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16e]"></a>mcu_dp_bool_update</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_bool_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
</UL>

<P><STRONG><a name="[16d]"></a>mcu_dp_enum_update</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_enum_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_vertiy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_check_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_handle
</UL>

<P><STRONG><a name="[15d]"></a>mcu_dp_raw_update</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_dp_raw_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mcu_dp_raw_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[df]"></a>mcu_dp_value_update</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mcu_api.o(i.mcu_dp_value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_for_vertiy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_check_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_handle
</UL>

<P><STRONG><a name="[161]"></a>mcu_firm_update_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.mcu_firm_update_handle))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[16c]"></a>mcu_get_dp_download_bool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_bool))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_reply_unlock_request_handle
</UL>

<P><STRONG><a name="[177]"></a>mcu_get_mul_temp_pass</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_api.o(i.mcu_get_mul_temp_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_get_mul_temp_pass &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>mcu_get_system_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_get_system_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_get_system_time &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>mcu_reset_wifi</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_reset_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_reset_wifi &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>mcu_set_wifi_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_set_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>mcu_update_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.mcu_update_handle))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[165]"></a>mcu_write_gltime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.mcu_write_gltime))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[162]"></a>mcu_write_rtctime</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, protocol.o(i.mcu_write_rtctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_write_rtctime &rArr; MX_Set_Ymd &rArr; HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Set_Ymd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Set_Hms
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[17f]"></a>mul_temp_pass_data</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, lock_api.o(i.mul_temp_pass_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mul_temp_pass_data &rArr; BeiJTime_To_GelinUTC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeiJTime_To_GelinUTC
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_handle
</UL>

<P><STRONG><a name="[168]"></a>mul_temp_pass_handle</STRONG> (Thumb, 406 bytes, Stack size 80 bytes, lock_api.o(i.mul_temp_pass_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mul_temp_pass_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_temp_pass_data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[183]"></a>my_memcpy</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mcu_api.o(i.my_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>

<P><STRONG><a name="[180]"></a>my_strlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcu_api.o(i.my_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[117]"></a>nfc_interrupt_init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bsp_spinfc.o(i.nfc_interrupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nfc_interrupt_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPINfc_Init
</UL>

<P><STRONG><a name="[167]"></a>pass_check_handle</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lock_api.o(i.pass_check_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pass_check_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[10f]"></a>pcd_RST</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fm175xx.o(i.pcd_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcd_RST &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_SetTPD
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ClrTPD
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_TO_PCD_TEST
</UL>

<P><STRONG><a name="[169]"></a>schedule_temp_pass_handle</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, lock_api.o(i.schedule_temp_pass_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = schedule_temp_pass_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_temp_pass_data
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[170]"></a>set_wifi_uart_buffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(i.set_wifi_uart_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_pass_check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[171]"></a>set_wifi_uart_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.set_wifi_uart_byte))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_pass_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[60]"></a>spi_GetReg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nfcspi.o(i.spi_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_GetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead_Sequence
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_TO_PCD_TEST
</UL>

<P><STRONG><a name="[92]"></a>spi_GetReg2</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nfcspi.o(i.spi_GetReg2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_GetReg2 &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg_Ext
</UL>

<P><STRONG><a name="[91]"></a>spi_SetReg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nfcspi.o(i.spi_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_SetReg &rArr; SPI_SendByte &rArr; SPI_NFC_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite_Sequence
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_TO_PCD_TEST
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReg_Ext
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReg_Ext
</UL>

<P><STRONG><a name="[166]"></a>temp_pass_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_api.o(i.temp_pass_handle))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[ed]"></a>uart_receive_input</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mcu_api.o(i.uart_receive_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_receive_input
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[184]"></a>uart_transmit_output</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, protocol.o(i.uart_transmit_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[156]"></a>wifi_protocol_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcu_api.o(i.wifi_protocol_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
</UL>

<P><STRONG><a name="[163]"></a>wifi_test_result</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.wifi_test_result))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[175]"></a>wifi_uart_service</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mcu_api.o(i.wifi_uart_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wifi_uart_service &rArr; data_handle &rArr; mul_temp_pass_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_queue_total_data
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read_Byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>wifi_uart_write_frame</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, system.o(i.wifi_uart_write_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset_wifi
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_system_time
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_mul_temp_pass
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_pass_check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Get_Wifi_Risi
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[164]"></a>wifi_update_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.wifi_update_handle))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f0]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[d6]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d4]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d5]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[e4]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[f1]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32f0xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[b2]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[ac]"></a>I2C_TransferConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[ab]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[ad]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[ae]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[b0]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[68]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[b8]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_HalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[6f]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[4c]"></a>ADC_ConversionStop</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[4e]"></a>ADC_Disable</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[4f]"></a>ADC_Enable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[ca]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[13f]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[140]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[182]"></a>schedule_temp_pass_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lock_api.o(i.schedule_temp_pass_data))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_temp_pass_handle
</UL>

<P><STRONG><a name="[16b]"></a>dp_download_reply_unlock_request_handle</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, protocol.o(i.dp_download_reply_unlock_request_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dp_download_reply_unlock_request_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[15c]"></a>product_info_update</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, system.o(i.product_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = product_info_update &rArr; wifi_uart_write_frame &rArr; uart_transmit_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[159]"></a>_printf_core</STRONG> (Thumb, 680 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[3e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
